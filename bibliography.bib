@article{Alzahrani2017,
abstract = {Strong security in web applications is critical to the success of your online presence. Security importance has grown massively, especially among web applications. Dealing with web application or website security issues requires deep insight and planning, not only because of the many tools that are available but also because of the industry immaturity. Thus, finding the proper tools requires deep understanding and several steps, including analyzing the development environment, business needs, and the web applications' complexity. In this paper, we demonstrate the architecture of web applications then list and evaluate the widespread security vulnerabilities. Those vulnerabilities are: Fingerprinting, Insufficient Transport Layer Protection, Information Leakage, Cross-Site Scripting, SQL Injection, and HTTP Splitting. In addition, this paper analyzes the tools that are used to scan for these widespread vulnerabilities in web applications. Finally, it evaluates tools due to security vulnerabilities and gives recommendations to the web applications' users and administrators aiming to educate them.},
author = {Alzahrani, Abdulrahman and Alqazzaz, Ali and Almashfi, Nabil and Fu, Huirong and Zhu, Ye},
doi = {10.11114/smc.v5i2.2663},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/WebApplicationSecurityToolsAnalysis.pdf:pdf},
issn = {2325-808X},
journal = {Studies in Media and Communication},
keywords = {web application,web application security,web application vulnerabilities},
mendeley-groups = {Seminararbeit},
month = {nov},
number = {2},
pages = {118--131},
title = {{Web Application Security Tools Analysis}},
url = {http://redfame.com/journal/index.php/smc/article/view/2663},
volume = {5},
year = {2017}
}
@inproceedings{Araujo2018,
abstract = {This paper presents a Pattern Based Testing approach for testing security aspects of the applications under test (AUT). It describes the two security patterns which are the focus of this work (“Account Lockout” and “Authentication Enforcer”) and the test strategies implemented to check if the applications are vulnerable or not regarding these patterns. The PBST (Pattern Based Security Testing) overall approach has two phases: exploration (to identify the web pages of the application under test) and testing (to execute the test strategies developed in order to detect vulnerabilities). An experiment is presented to validate the approach over five public web applications. The goal is to assess the behavior of the tool when varying the upper limit of pages to visit and assess its capacity to find real vulnerabilities. The results are promising. Indeed, it was possible to check that the vulnerabilities detected corresponded to real security problems.},
author = {Ara{\'{u}}jo, Paulo and Paiva, Ana},
booktitle = {Proceedings of the 6th International Conference on Model-Driven Engineering and Software Development},
doi = {10.5220/0006606504720479},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/PatternbasedWebSecurityTesting.pdf:pdf},
isbn = {978-989-758-283-7},
keywords = {Pattern based Security Testing,Pattern based Testing,Security Testing,Security Web Testing},
mendeley-groups = {Seminararbeit},
number = {Modelsward},
pages = {472--479},
publisher = {SCITEPRESS - Science and Technology Publications},
title = {{Pattern based Web Security Testing}},
url = {http://www.scitepress.org/DigitalLibrary/Link.aspx?doi=10.5220/0006606504720479},
year = {2018}
}
@inproceedings{Bocic2015,
abstract = {Modern applications use back-end data stores for persistent data. Automated verification of the code that updates the data store would prevent bugs that can cause loss or corruption of data. In this paper, we focus on the most challenging part of this problem: automated verification of code that updates the data store and contains loops. Due to dependencies between loop iterations, verification of code that contains loops is a hard problem, and typically requires manual assistance in the form of loop invariants. We present a fully automated technique that improves verifiability of loops. We first define coexecution, a method for modeling loop iterations that simplifies automated reasoning about loops. Then, we present a fully automated static program analysis that detects whether the behavior of a given loop can be modeled using coexecution. We provide a customized verification technique for coexecutable loops that results in more effective verification. In our experiments we observed that, in 45{\%} of cases, modeling loops using coexecution reduces verification time between 1 and 4 orders of magnitude. In addition, the rate of inconclusive verification results in the presence of loops is reduced from 65{\%} down to 24{\%}, all without requiring loop invariants or any manual intervention.},
author = {Bocic, Ivan and Bultan, Tevfik},
booktitle = {2015 IEEE/ACM 37th IEEE International Conference on Software Engineering},
doi = {10.1109/ICSE.2015.87},
file = {:C$\backslash$:/Users/rebek/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Boci´cboci´c, Bultan - Unknown - Coexecutability for Efficient Verification of Data Model Updates(2).pdf:pdf},
isbn = {978-1-4799-1934-5},
issn = {02705257},
mendeley-groups = {Seminararbeit},
month = {may},
pages = {744--754},
publisher = {IEEE},
title = {{Coexecutability for Efficient Verification of Data Model Updates}},
url = {http://ieeexplore.ieee.org/document/7194622/},
volume = {1},
year = {2015}
}
@inproceedings{Bocic2017,
abstract = {Modern web applications use complex data models and access control rules which lead to data integrity and access control errors. One approach to find such errors is to use formal verification techniques. However, as a first step, most formal verification techniques require extraction of a formal model which is a difficult problem in itself due to dynamic features of modern languages, and it is typically done either manually, or using ad hoc techniques. In this paper, we present a technique called symbolic model extraction for extracting formal data models from web applications. The key ideas of symbolic model extraction are 1) to use the source language interpreter for model extraction, which enables us to handle dynamic features of the language, 2) to use code instrumentation so that execution of each instrumented piece of code returns the formal model that corresponds to that piece of code, 3) to instrument the code dynamically so that the models of methods that are created at runtime can also be extracted, and 4) to execute both sides of branches during instrumented execution so that all program behaviors can be covered in a single instrumented execution. We implemented the symbolic model extraction technique for the Rails framework and used it to extract data and access control models from web applications. Our experiments demonstrate that symbolic model extraction is scalable and extracts formal models that are precise enough to find bugs in real-world applications without reporting too many false positives.},
author = {Boci{\'{c}}, Ivan and Bultan, Tevfik},
booktitle = {2017 IEEE/ACM 39th International Conference on Software Engineering (ICSE)},
doi = {10.1109/ICSE.2017.72},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/SymbolicModelExtractionForWebApplicationsVerification.pdf:pdf},
isbn = {978-1-5386-3868-2},
keywords = {Formal Verification,Model Extraction,Web Applications},
mendeley-groups = {Seminararbeit},
month = {may},
pages = {724--734},
publisher = {IEEE},
title = {{Symbolic Model Extraction for Web Application Verification}},
url = {http://ieeexplore.ieee.org/document/7985708/},
year = {2017}
}
@inproceedings{Bocic2014,
abstract = {Modern software applications store their data in remote cloud servers. Users interact with these applications using web browsers or thin clients running on mobile devices. A key issue in dependability of these applications is the correctness of the actions that update the data store, which are triggered by user requests. In this paper, we present techniques for au- tomatically checking if the actions of an application preserve the data model invariants. Our approach first automatically extracts a data model specification, which we call an abstract data store, from a given application using instrumented exe- cution. The abstract data store identifies the sets of objects and relations (associations) used by the application, and the actions that update the data store by deleting or creating objects or by changing the relations among the objects. We show that checking invariants of an abstract data store corre- sponds to inductive invariant verification, and can be done using a mapping to First Order Logic (FOL) and using a FOL theorem prover. We implemented this approach for the Rails framework and applied it to three open source applications. We found four previously unknown bugs and reported them to the developers, who confirmed and imme- diately fixed two of them.},
address = {New York, New York, USA},
author = {Boci{\'{c}}, Ivan and Bultan, Tevfik},
booktitle = {Proceedings of the 36th International Conference on Software Engineering - ICSE 2014},
doi = {10.1145/2568225.2568281},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/InductiveVerificationofDatamodelInvariantsforWebApplications.pdf:pdf},
isbn = {9781450327565},
issn = {02705257},
keywords = {Automated verification,Ruby on Rails,data model,inductive invariants},
mendeley-groups = {Seminararbeit},
number = {1},
pages = {620--631},
publisher = {ACM Press},
title = {{Inductive verification of data model invariants for web applications}},
url = {http://dl.acm.org/citation.cfm?doid=2568225.2568281},
year = {2014}
}
@inproceedings{Bocic2015a,
abstract = {Misuse or loss of web application data can have catastrophic consequences in today's Internet oriented world. Hence, verification of web application data models is of paramount importance. We have developed a framework for verification of web application data models via translation to First Order Logic (FOL), followed by automated theorem proving. Due to the undecidability of FOL, this automated approach does not always produce a conclusive answer. In this paper, we investigate the use of many-sorted logic in data model verification in order to improve the effectiveness of this approach. Many-sorted logic allows us to specify type information explicitly, thus lightening the burden of reasoning about type information during theorem proving. Our experiments demonstrate that using many-sorted logic improves the verification performance significantly, and completely eliminates inconclusive results in all cases over 7 real world web applications, down from an 17{\%} inconclusive rate.},
author = {Boci{\'{c}}, Ivan and Bultan, Tevfik},
booktitle = {2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
doi = {10.1109/ASE.2015.48},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/EfficientDataModelVerificationWithManySortedLogic.pdf:pdf},
isbn = {978-1-5090-0025-8},
keywords = {Data Models,Logic,Many-Sorted Logic,Verification},
mendeley-groups = {Seminararbeit},
month = {nov},
pages = {42--52},
publisher = {IEEE},
title = {{Efficient Data Model Verification with Many-Sorted Logic}},
url = {http://ieeexplore.ieee.org/document/7371994/},
year = {2015}
}
@inproceedings{Bocic2016,
abstract = {Access control bugs in web applications can have dire consequences since many web applications store private and sensitive data. In this paper we present an automated verification technique for access control in Ruby on Rails (Rails) applications. Our technique starts by automatically extracting a model that captures 1) the ways the data is accessed and modified by the application, 2) the access control policy of the application, and 3) the authorization checks used for access control policy enforcement. Then, it automatically translates this model to first order logic and uses automated theorem provers to check whether the declared access control policy is correctly enforced by the implementation. We implemented our technique in a tool called CanCheck. Using CanCheck on open source Rails applications, we found numerous previously unknown exploitable access control bugs as well as several deficiencies in access control policies.},
address = {New York, New York, USA},
author = {Boci{\'{c}}, Ivan and Bultan, Tevfik},
booktitle = {Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering - ASE 2016},
doi = {10.1145/2970276.2970350},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/FindingAccessControlBugsinWebApplicationswithCanCheck.pdf:pdf},
isbn = {9781450338455},
keywords = {Access Control,Logic-based Verification,Web Applications},
mendeley-groups = {Seminararbeit},
pages = {155--166},
publisher = {ACM Press},
title = {{Finding access control bugs in web applications with CanCheck}},
url = {http://dl.acm.org/citation.cfm?doid=2970276.2970350},
year = {2016}
}
@inproceedings{Cadar2011,
abstract = {We present results for the "Impact Project Focus Area" on the topic of symbolic execution as used in software testing. Symbolic execution is a program analysis technique introduced in the 70s that has received renewed interest in recent years, due to algorithmic advances and increased availability of computational power and constraint solving technology. We review classical symbolic execution and some modern extensions such as generalized symbolic execution and dynamic test generation. We also give a preliminary assessment of the use in academia, research labs, and industry. {\textcopyright} 2011 ACM.},
address = {New York, New York, USA},
author = {Cadar, Cristian and Godefroid, Patrice and Khurshid, Sarfraz and Pǎsǎreanu, Corina S. and Sen, Koushik and Tillmann, Nikolai and Visser, Willem},
booktitle = {Proceedings - International Conference on Software Engineering},
doi = {10.1145/1985793.1985995},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/SymbolicExecitionforSoftwareTestinginPractice.pdf:pdf},
isbn = {9781450304450},
issn = {02705257},
keywords = {dynamic test generation,generalized symbolic execution},
mendeley-groups = {Seminararbeit},
pages = {1066--1071},
publisher = {ACM Press},
title = {{Symbolic execution for software testing in practice - Preliminary assessment}},
url = {http://portal.acm.org/citation.cfm?doid=1985793.1985995},
year = {2011}
}
@inproceedings{Chaudhuri2010,
abstract = {Many of today's web applications are built on frameworks that include sophisticated defenses against malicious adversaries. However, mistakes in the way developers deploy those defenses could leave applications open to attack. To address this issue, we introduce Rubyx, a symbolic executor that we use to analyze Ruby-on- Rails web applications for security vulnerabilities. Rubyx specifications can easily be adapted to a variety of properties, since they are built from general assertions, assumptions, and object invariants. We show how to write Rubyx specifications to detect susceptibility to cross-site scripting and cross-site request forgery, insufficient authentication, leaks of secret information, insufficient access control, as well as application-specific security properties. We used Rubyx to check seven web applications from various sources against our specifications. We found many vulnerabilities, and each application was subject to at least one critical attack. Encouragingly, we also found that it was relatively easy to fix most vulnerabilities, and that Rubyx showed the absence of attacks after our fixes. Our results suggest that Rubyx is a promising new way to discover security vulnerabilities in Ruby-on-Rails web applications. Copyright 2010 ACM.},
address = {New York, New York, USA},
author = {Chaudhuri, Avik and Foster, Jeffrey S.},
booktitle = {Proceedings of the 17th ACM conference on Computer and communications security - CCS '10},
doi = {10.1145/1866307.1866373},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/SymbolicSecurityAnalysisofRubyonRailsWebApplications.pdf:pdf},
isbn = {9781450302456},
issn = {15437221},
keywords = {Automated analysis,Symbolic execution,Web-application security},
mendeley-groups = {Seminararbeit},
pages = {585--594},
publisher = {ACM Press},
title = {{Symbolic security analysis of ruby-on-rails web applications}},
url = {http://portal.acm.org/citation.cfm?doid=1866307.1866373},
year = {2010}
}
@article{ElIdrissi2017,
abstract = {With the increasing development of the Internet, web applications have become increasingly vulnerable and exposed to malicious attacks which affect essential properties such as confidentiality, integrity or availability of information systems. To deal with these malicious threats, web application developers and IT security administrators have used the web application vulnerabilities scanners (WAVS) as scanning tools that regularly audit web applications to check for exploitable vulnerabilities. In today's market, a large number of web application scanning tools are available. Though these tools are available in market, the question is how efficient they are in addressing security concerns in web applications. The primary focus of this Article is to assess the effectiveness and performance of eleven scanners as far as vulnerability detection in web applications is concerned. This evaluation is multifunctional as it can be used to specify the degree of scanners ‘efficiency, extract conclusions about their abilities to detect vulnerabilities, and prevent others by making recommendations of the use of WAVS by companies or organizations.},
author = {{El Idrissi}, S. and Berbiche, N. and Guerouate, F. and Sbihi, M.},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/PerformanceEvalutionofWebApplicationSecurityScannersforPreventionandProtectionagainsVulnerabilities.pdf:pdf},
issn = {09739769},
journal = {International Journal of Applied Engineering Research},
keywords = {Evaluation,Vulnerabilities,Vulnerability detection,Web applications,Web vulnerability scanners},
mendeley-groups = {Seminararbeit},
number = {21},
pages = {11068--11076},
publisher = {Research India Publications},
title = {{Performance Evaluation of Web Application Security Scanners for Prevention and Protection against Vulnerabilities}},
volume = {12},
year = {2017}
}
@article{Fadhel2018,
abstract = {A Role-based Access Control (RBAC) mechanism prevents unauthorized users to perform an operation, according to authorization policies which are defined on the user's role within an enterprise. Several models have been proposed to specify complex RBAC policies. However, existing approaches for policy enforcement do not fully support all the types of policies that can be expressed in these models, which hinders their adoption among practitioners. In this paper we propose a model-driven enforcement framework for complex policies captured by GemRBAC+CTX, a comprehensive RBAC model proposed in the literature. We reduce the problem of making an access decision to checking whether a system state (from an RBAC point of view), expressed as an instance of the GemRBAC+CTX model, satisfies the constraints corresponding to the RBAC policies to be enforced at run time. We provide enforcement algorithms for various types of access requests and events, and a prototype tool (MORRO) implementing them. We also show how to integrate MORRO into an industrial Web application. The evaluation results show the applicability of our approach on a industrial system and its scalability with respect to the various parameters characterizing an AC configuration.},
author = {Fadhel, Ameni Ben and Bianculli, Domenico and Briand, Lionel C.},
doi = {10.1145/3238147.3238167},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/ModelDrivenRunTimeEnforcementofComplexRoleBasedAccessControlPolicies.pdf:pdf},
isbn = {9781450359375},
journal = {ASE 2018 - Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering},
keywords = {Enforcement,Model-driven engineering,Policies,Role-based access control},
mendeley-groups = {Seminararbeit},
pages = {248--258},
title = {{Model-driven run-time enforcement of complex role-based access control policies}},
year = {2018}
}
@inproceedings{Felt2011,
abstract = {Welcome to WebApps '11, the second annual USENIX Conference on Web Application Development. Our con- tinuing emphasis is ensuring that attendees are exposed to the most interesting new work from both industry and academia. To that end, both the program committee and the accepted papers represent a balanced mix of industry practitioners from the highest-profile Web companies and university researchers working on cutting-edge Web technologies. The twelve papers presented (of 28 submissions received) were subjected to the rigorous review standards for which USENIX's academically focused conferences are known. All papers received at least three thorough reviews and some received more; each paper got a fair and complete discussion at the in-person program committee meet- ing in Berkeley; and each paper was assigned a shepherd to help improve the final presentation. We hope you will be pleased with the results, which showcase a wide variety of Web applications and technologies. I'd like to thank the authors for taking the time to submit a paper, whether it was accepted or not. Preparing a paper is a lot of work, and we are still exploring ways to engage industrial authors and get the best industrial work along with the best academic work. I personally welcome any suggestions from authors or prospective authors in this regard. I also thank the program committee for their efforts in reviewing and shepherding, especially some of the indus- trial participants, whose schedules can be particularly hectic. Lastly, as always, USENIX's professional organization makes the logistical aspects of running a program commit- tee a breeze, especially Ellie Young, Anne Dickison, Casey Henderson, and Jane-Ellen Long, along with the rest of the USENIX staff. I hope that what you see and hear at WebApps '11 inspires you to submit your own best work to future WebApps conferences. Armando},
author = {Felt, Ap and Greenwood, K and Wagner, D},
booktitle = {WebApps '11: 2nd USENIX Conference on Web Application Development},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/GuardRailsADataCentricWebApplicationSecurityFramework.pdf:pdf},
isbn = {978-931971-86-7},
mendeley-groups = {Seminararbeit},
pages = {1--12},
title = {{GuardRails: 2nd USENIX Conference on Web Application Development (WebApps `11)}},
url = {https://www.usenix.org/legacy/events/webapps11/tech/final{\_}files/webapps11{\_}proceedings.pdf{\#}page=83},
year = {2011}
}
@incollection{Hosek2011,
abstract = {Web applications in many domains such as healthcare and finance must process sensitive data, while complying with legal policies regarding the release of different classes of data to different parties. Currently, software bugs may lead to irreversible disclosure of confidential data in multi-tier web applications. An open challenge is how developers can guarantee these web applications only ever release sensitive data to authorised users without costly, recurring security audits. Our solution is to provide a trusted middleware that acts as a "safety net" to event-based enterprise web applications by preventing harmful data disclosure before it happens. We describe the design and implementation of SafeWeb, a Ruby-based middleware that associates data with security labels and transparently tracks their propagation at different granularities across a multi-tier web architecture with storage and complex event processing. For efficiency, maintainability and ease-of-use, SafeWeb exploits the dynamic features of the Ruby programming language to achieve label propagation and data flow enforcement. We evaluate SafeWeb by reporting our experience of implementing a web-based cancer treatment application and deploying it as part of the UK National Health Service (NHS). {\textcopyright} 2011 IFIP International Federation for Information Processing.},
address = {Berlin, Heidelberg},
author = {Hosek, Petr and Migliavacca, Matteo and Papagiannis, Ioannis and Eyers, David M. and Evans, David and Shand, Brian and Bacon, Jean and Pietzuch, Peter},
booktitle = {Middleware 2011. Lecture Notes in Computer Science},
doi = {10.1007/978-3-642-25821-3_25},
editor = {Kon, Fabio and Kermarrec, Anne-Marie},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/SAfeWebAMiddlewareForSecuringR.pdf:pdf},
isbn = {9783642258206},
issn = {03029743},
mendeley-groups = {Seminararbeit},
pages = {491--511},
publisher = {Springer},
title = {{SafeWeb: A Middleware for Securing Ruby-Based Web Applications}},
url = {http://link.springer.com/10.1007/978-3-642-25821-3{\_}25},
volume = {7049},
year = {2011}
}
@inproceedings{Huang2004,
abstract = {Security remains a major roadblock to universal acceptance of the Web for many kinds of transactions, especially since the recent sharp increase in remotely exploitable vulnerabilities has been attributed to Web application bugs. Many verification tools are discovering previously unknown vulnerabilities in legacy C programs, raising hopes that the same success can be achieved with Web applications. In this paper, we describe a sound and holistic approach to ensuring Web application security. Viewing Web application vulnerabilities as a secure information flow problem, we created a lattice-based static analysis algorithm derived from type systems and typestate, and addressed its soundness. During the analysis, sections of code considered vulnerable are instrumented with runtime guards, thus securing Web applications in the absence of user intervention. With sufficient annotations, runtime overhead can be reduced to zero. We also created a tool named WebSSARI (Web application Security by Static Analysis and Runtime Inspection) to test our algorithm, and used it to verify 230 open-source Web application projects on SourceForge.net, which were selected to represent projects of different maturity, popularity, and scale. 69 contained vulnerabilities and their developers were notified. 38 projects acknowledged our findings and stated their plans to provide patches. Our statistics also show that static analysis reduced potential runtime overhead by 98.4{\%}.},
address = {New York, New York, USA},
author = {Huang, Yao-Wen and Yu, Fang and Hang, Christian and Tsai, Chung-Hung and Lee, Der-Tsai and Kuo, Sy-Yen},
booktitle = {Proceedings of the 13th conference on World Wide Web - WWW '04},
doi = {10.1145/988672.988679},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/SecuringWebApplicationCodebyStaticAnalysisandRuntimeProtection.pdf:pdf},
isbn = {158113844X},
keywords = {Information flow,Noninterference,Program security,Security vulnerabilities,Type systems,Verification,Web application security},
mendeley-groups = {Seminararbeit},
pages = {40--51},
publisher = {ACM Press},
title = {{Securing web application code by static analysis and runtime protection}},
url = {http://portal.acm.org/citation.cfm?doid=988672.988679},
year = {2004}
}
@article{Jackson2002,
abstract = {Alloy is a little language for describing structural properties. It offers a declaration syntax compatible with graphical object models, and a set-based formula syntax powerful enough to express complex constraints and yet amenable to a fully automatic semantic analysis. Its meaning is given by translation to an even smaller (formally defined) kernel. This paper presents the language in its entirety, and explains its motivation, contributions and deficiencies. {\textcopyright} 2002, ACM. All rights reserved.},
author = {Jackson, Daniel},
doi = {10.1145/505145.505149},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/Alloy{\_}ALightweightObjectModellingNotation.pdf:pdf},
issn = {1049-331X},
journal = {ACM Transactions on Software Engineering and Methodology (TOSEM)},
keywords = {Design,Documentation,Languages,Object models,Z specification language,first-order logic},
mendeley-groups = {Seminararbeit},
month = {apr},
number = {2},
pages = {256--290},
title = {{Alloy}},
url = {http://dl.acm.org/doi/10.1145/505145.505149},
volume = {11},
year = {2002}
}
@inproceedings{Jovanovic2006,
author = {Jovanovic, Nenad and Kruegel, Christopher and Kirda, Engin},
booktitle = {2006 IEEE Symposium on Security and Privacy (S{\&}P'06)},
doi = {10.1109/SP.2006.29},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/PixyAStaticAnalysisToolforDetectingWebApplicationVulnerabilities.pdf:pdf},
isbn = {0-7695-2574-1},
mendeley-groups = {Seminararbeit},
pages = {6--24},
publisher = {IEEE},
title = {{Pixy: a static analysis tool for detecting Web application vulnerabilities}},
url = {http://www.iseclab.org/papers/pixy{\_}techreport.pdf http://ieeexplore.ieee.org/document/1624016/},
year = {2006}
}
@inproceedings{Lam2008,
abstract = {SQL injection and cross-site scripting are two of the most common security vulnerabilities that plague web applications today. These and many others result from having unchecked data input reach security-sensitive operations. This paper describes a language called PQL (Program Query Language) that allows users to declare to specify information flow patterns succinctly and declaratively. We have developed a static context-sensitive, but flow-insensitive information flow tracking analysis that can be used to find all the vulnerabilities in a program. In the event that the analysis generates too many warnings, the result can be used to drive a model-checking system to analyze more precisely. Model checking is also used to automatically generate the input vectors that expose the vulnerability. Any remaining behavior these static analyses have not isolated may be checked dynamically. The results of the static analyses may be used to optimize these dynamic checks. Our experimental results indicate the language is expressive enough for describing a large number of vulnerabilities succinctly. We have analyzed over nine applications, detecting 30 serious security vulnerabilities. We were also able to automatically recover from attacks as they occurred using the dynamic checker. Copyright {\textcopyright} 2008 ACM.},
address = {New York, New York, USA},
author = {Lam, Monica S. and Martin, Michael and Livshits, Benjamin and Whaley, John},
booktitle = {Proceedings of the 2008 ACM SIGPLAN symposium on Partial evaluation and semantics-based program manipulation - PEPM '08},
doi = {10.1145/1328408.1328410},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/SecuringWebApplicationswithStatic....pdf:pdf},
isbn = {9781595939777},
keywords = {Cross-site scripting,Dynamic analysis,Model checking,Pattern matching,SQL injection,Static analysis,Web applications},
mendeley-groups = {Seminararbeit},
pages = {3--12},
publisher = {ACM Press},
title = {{Securing web applications with static and dynamic information flow tracking}},
url = {http://portal.acm.org/citation.cfm?doid=1328408.1328410},
year = {2008}
}
@article{Li2014,
abstract = {Web applications are one of the most prevalent platforms for information and service delivery over the Internet today. As they are increasingly used for critical services, web applications have become a popular and valuable target for security attacks. Although a large body of techniques have been developed to fortify web applications and mitigate attacks launched against them, there has been little effort devoted to drawing connections among these techniques and building the big picture of web application security research. This article surveys the area of securing web applications from the server side, with the aim of systematizing the existing techniques into a big picture that promotes future research. We first present the unique aspects of the web application development that cause inherent challenges in building secure web applications. We then discuss three commonly seen security vulnerabilities within web applications: input validation vulnerabilities, session management vulnerabilities, and application logic vulnerabilities, along with attacks that exploit these vulnerabilities. We organize the existing techniques along two dimensions: (1) the security vulnerabilities and attacks that they address and (2) the design objective and the phases of a web application during which they can be carried out. These phases are secure construction of new web applications, security analysis/testing of legacy web applications, and runtime protection of legacy web applications. Finally, we summarize the lessons learned and discuss future research opportunities in this area. {\textcopyright} 2014 ACM.},
author = {Li, Xiaowei and Xue, Yuan},
doi = {10.1145/2541315},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/ASurveyonServerSideApproachestoSecuringWebApplications.pdf:pdf},
issn = {0360-0300},
journal = {ACM Computing Surveys},
keywords = {Application logic vulnerability,Input validation vulnerability,Session management vulnerability,Web application security},
mendeley-groups = {Seminararbeit},
month = {apr},
number = {4},
pages = {1--29},
title = {{A survey on server-side approaches to securing web applications}},
url = {https://dl.acm.org/doi/10.1145/2541315},
volume = {46},
year = {2014}
}
@inproceedings{Munetoh2013,
abstract = {In a Web application framework suitable for a code-centric development approach, maintaining the faultlessness of the security features is an issue because the security features are dispersed throughout the code during the implementation. In this paper, we propose a method and develop a static verification tool for Web applications that checks the completeness of the security features implementation. The tool generates a navigation model from an application code while retaining the security properties and then checks the consistency of the security properties on the model since access control is relevant to the application behavior. We applied the proposed tool to various Ruby on Rails Web application source codes and then tested their authentication and authorization features. Results showed that the tool is an effective aid in the implementation of security features in code-centric and iterative Web application development. {\textcopyright} 2013 IEEE.},
author = {Munetoh, Seiji and Yoshioka, Nobukazu},
booktitle = {2013 International Conference on Availability, Reliability and Security},
doi = {10.1109/ARES.2013.47},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/Model-AssistedAccessContorlImplementationforCodeCentricRubyonRailWebAppDev.pdf:pdf},
isbn = {978-0-7695-5008-4},
keywords = {Access control,Agile development,Modeling Web application,Static security analysis},
mendeley-groups = {Seminararbeit},
month = {sep},
pages = {350--359},
publisher = {IEEE},
title = {{Model-Assisted Access Control Implementation for Code-centric Ruby-on-Rails Web Application Development}},
url = {http://ieeexplore.ieee.org/document/6657263/},
year = {2013}
}
@inproceedings{Munetoh2013a,
abstract = {We propose a model-assisted security testing framework for developing Web applications. We devised a tool called 'RailroadMap' that automatically extracts a behavior model from the code base of Ruby-on-Rails. This model provides a unified point of view for analyzing security problems by representing an application's behavior, which includes all security functions and possible attack scenarios. {\textcopyright} 2013 IEEE.},
author = {Munetoh, Seiji and Yoshioka, Nobukazu},
booktitle = {2013 IEEE Sixth International Conference on Software Testing, Verification and Validation},
doi = {10.1109/ICST.2013.80},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/RAILROADMAPAnAgileSecurityTestingFrameworkforWebApplicationDev.pdf:pdf},
isbn = {978-0-7695-4968-2},
mendeley-groups = {Seminararbeit},
month = {mar},
pages = {491--492},
publisher = {IEEE},
title = {{RAILROADMAP: An Agile Security Testing Framework for Web-application Development}},
url = {http://ieeexplore.ieee.org/document/6569769/},
year = {2013}
}
@inproceedings{Near2014,
abstract = {Derailer is an interactive tool for finding security bugs in web applications. Using symbolic execution, it enumerates the ways in which application data might be exposed. The user is asked to examine these exposures and classify the conditions under which they occur as security-related or not; in so doing, the user effectively constructs a specification of the application's security policy. The tool then highlights exposures missing security checks, which tend to be security bugs. We have tested Derailer's scalability on several large opensource Ruby on Rails applications. We have also applied it to a large number of student projects (designed with different security policies in mind), exposing a variety of security bugs that eluded human reviewers.},
address = {New York, New York, USA},
author = {Near, Joseph P. and Jackson, Daniel},
booktitle = {Proceedings of the 29th ACM/IEEE international conference on Automated software engineering - ASE '14},
doi = {10.1145/2642937.2643012},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/DerailerinteractivesecurityAnalysisForWebApplications.pdf:pdf},
isbn = {9781450330138},
keywords = {Security,Static analysis,Web applications},
mendeley-groups = {Seminararbeit},
pages = {587--598},
publisher = {ACM Press},
title = {{Derailer: Interactive Security Analysis for Web Applications}},
url = {http://dl.acm.org/citation.cfm?doid=2642937.2643012},
year = {2014}
}
@inproceedings{Near2016,
address = {New York, New York, USA},
author = {Near, Joseph P and Jackson, Daniel},
booktitle = {Proceedings of the 38th International Conference on Software Engineering - ICSE '16},
doi = {10.1145/2884781.2884836},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/Near, Jackson - 2016 - Finding security bugs in web applications using a catalog of access control patterns-annotated.pdf:pdf},
isbn = {9781450339001},
keywords = {access control,bug finding,web application security},
mendeley-groups = {Seminararbeit},
pages = {947--958},
publisher = {ACM Press},
title = {{Finding security bugs in web applications using a catalog of access control patterns}},
url = {http://dl.acm.org/citation.cfm?doid=2884781.2884836},
year = {2016}
}
@inproceedings{Near2012,
address = {New York, New York, USA},
author = {Near, Joseph P and Jackson, Daniel},
booktitle = {Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering - FSE '12},
doi = {10.1145/2393596.2393667},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/RubiconBoundedVerificationofWebApplications.pdf:pdf},
isbn = {9781450316149},
mendeley-groups = {Seminararbeit},
pages = {1--11},
publisher = {ACM Press},
title = {{Rubicon: bounded verification of web applications}},
url = {http://dl.acm.org/citation.cfm?doid=2393596.2393667},
year = {2012}
}
@inproceedings{Nijjar2011,
abstract = {The use of scripting languages to build web applications has increased programmer productivity, but at the cost of degrading dependability. In this paper we focus on a class of bugs that appear in web applications that are built based on the Model-View-Controller architecture. Our goal is to automatically discover data model errors in Ruby on Rails applications. To this end, we created an automatic translator that converts data model expressions in Ruby on Rails applications to formal specifications. In particular, our translator takes Active Records specifications (which are used to specify data models in Ruby on Rails applications) as input and generates a data model in Alloy language as output. We then use bounded verification techniques implemented in the Alloy Analyzer to look for errors in these formal data model specifications. We applied our approach to two open source web applications to demonstrate its feasibility. {\textcopyright} 2011 ACM.},
author = {Nijjar, Jaideep and Bultan, Tevfik},
booktitle = {2011 International Symposium on Software Testing and Analysis, ISSTA 2011 - Proceedings},
doi = {10.1145/2001420.2001429},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/BoundedVerificationOfRubyonRailsDataModels.pdf:pdf},
isbn = {9781450305624},
keywords = {MVC frameworks,automated verification,bounded verification,data model,web application modeling and analysis},
mendeley-groups = {Seminararbeit},
pages = {67--77},
title = {{Bounded verification of Ruby on rails data models}},
year = {2011}
}
@inproceedings{Yip2009,
abstract = {Resin is a new language runtime that helps prevent security vulnerabilities, by allowing programmers to specify application-level data flow assertions. Resin provides policy objects, which programmers use to specify assertion code and metadata; data tracking, which allows programmers to associate assertions with application data, and to keep track of assertions as the data flow through the application; and filter objects, which programmers use to define data flow boundaries at which assertions are checked. Resin's runtime checks data flow assertions by propagating policy objects along with data, as that data moves through the application, and then invoking filter objects when data crosses a data flow boundary, such as when writing data to the network or a file. Using Resin, Web application programmers can prevent a range of problems, from SQL injection and cross-site scripting, to inadvertent password disclosure and missing access control checks. Adding a Resin assertion to an application requires few changes to the existing application code, and an assertion can reuse existing code and data structures. For instance, 23 lines of code detect and prevent three previously-unknown missing access control vulnerabilities in phpBB, a popular Web forum application. Other assertions comprising tens of lines of code prevent a range of vulnerabilities in Python and PHP applications. A prototype of Resin incurs a 33{\%} CPU overhead running the HotCRP conference management application. Copyright 2009 ACM.},
address = {New York, New York, USA},
author = {Yip, Alexander and Wang, Xi and Zeldovich, Nickolai and Kaashoek, M. Frans},
booktitle = {Proceedings of the ACM SIGOPS 22nd symposium on Operating systems principles - SOSP '09},
doi = {10.1145/1629575.1629604},
file = {:C$\backslash$:/Users/rebek/Google Drive (rebekkammt@gmail.com)/4.Semester/Seminararbeit aus Informatik/Research/ImprovingApplicationSecuritywithDataFlowAssertions.pdf:pdf},
isbn = {9781605587523},
keywords = {PHP,Privacy,Python,SQL injection,Security,Web,XSS},
mendeley-groups = {Seminararbeit},
pages = {291--304},
publisher = {ACM Press},
title = {{Improving application security with data flow assertions}},
url = {http://portal.acm.org/citation.cfm?doid=1629575.1629604},
year = {2009}
}
